{
	"^": {
		"prefix": "^",
		"body": "^($1) $2"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case ${1:'${2:string}'}",
			"\t$0"
		],
		"description": "case statement"
	},
	"classdef":{
		"prefix": "classdef",
		"body": ["classdef (${1:ClassAttributes}) ${2:ClassName}",
				 "\t$0",
				 "end"]
	},
	"properties":{
		"prefix": "properties",
		"body": ["properties (${1:PropertyAttributes})", 
      			"\t$0",
   				"end"]
	},
	"methods":{
		"prefix": "methods",
		"body": ["methods (${1:MethodAttributes})",
      			 "\tfunction ${2:obj} = ${3:methodName}(${4:obj},${5:args})",
         		"\t\t$0",
      			"\tend",
   				"end"]
	},
	"dsp": {
		"prefix": "dsp",
		"body": [
			"disp(sprintf('${2:format}, $1'});"
		],
		"description": "dsp sprintf"
	},
	"disp": {
		"prefix": "disp",
		"body": "disp('${1:text}')",
		"description": "Displays text"
	},
	"dlmwrite": {
		"prefix": "dlmwrite",
		"body": "dlmwrite('${1:filename}.txt', [${2:variables}]${3:, '${4:delimiter}', '${5:\\t}'});",
		"description": "Write matrix to ASCII-delimited file"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else",
			"\t${1:body}"
		],
		"description": "else statement"
	},
	"elseif": {
		"prefix": "elseif",
		"body": [
			"elseif ${1:condition}",
			"\t${0:body}"
		],
		"description": "elseif statement"
	},
	"error": {
		"prefix": "error",
		"body": "error('${1:error description}'${2:, ${3:A1}})",
		"description": "Throw error and display message"
	},
	"e": {
		"prefix": "e",
		"body": "exp(${1:X})$0",
		"description": "Exponential"
	},
	"events":{
		"prefix": "events",
		"body": ["events (${1:EventAttributes})", 
      			 "\t$0",
   				 "end"]
	},
	"enumeration":{
		"prefix": "enumeration",
		"body": ["enumeration",
      			 "\t$0",
   			     "end"]
	},
	"fors": {
		"prefix": "fors",
		"body": [
			"for ${1:s} = transpose(${2:strings}(:)); $1 = $1{1}",
			"\t$0",
			"end;",
			"clear $1;"
		],
		"description": "for â€¦ end cell strings"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for ${1:index} = ${2:1}${3::${4:n}}",
			"\t$0",
			"end"
		],
		"description": "Execute statements specified number of times"
	},
	"fordr": {
		"prefix": "fordr",
		"body": [
			"for ${1:index} = ${2:${4:drange(${3:colonop})}}",
			"\t$0",
			"end"
		],
		"description": "for-loop over distributed range"
	},
	"fprintf": {
		"prefix": "fpr",
		"body": "fprintf(${1:fileID}, ${2:formatSpec}, ${3:A1})",
		"description": "Write data to text file"
	},
	"function": {
		"prefix": "function",
		"body": [
			"function ${1:output} = ${2:myFun}(${3:input})",
			"%$2 - ${4:Description}",
			"%",
			"% Syntax: $1 = $2($3)",
			"%",
			"% ${5:Long description}",
			"\t$0",
			"end"
		],
		"description": "Declare function name, inputs, and outputs"
	},
	"get": {
		"prefix": "get",
		"body": "get(${1:gca}, '${2:propertyName}');",
		"description": "Query graphics object properties"
	},
	"griddata": {
		"prefix": "griddata",
		"body": "griddata(${1:x}, ${2:y}, ${3:z}, ${4:xq}, ${5:yq}, ${6:zq});",
		"description": "Interpolate scattered data"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1:condition}",
			"\t$2",
			"end"
		],
		"description": "if statement"
	},
	"if else": {
		"prefix": "ifelse",
		"body": [
			"if ${1:condition}",
			"\t$2",
			"else",
			"\t$3",
			"end"
		],
		"description": "if else statement"
	},
	"if elseif": {
		"prefix": "ifelif",
		"body": [
			"if ${1:condition}",
			"\t$2",
			"elseif ${3:condition}",
			"\t$4",
			"else",
			"\t $5",
			"end"
		],
		"description": "if elseif statement"
	},
	"line": {
		"prefix": "line",
		"body": "line(${1:X}, ${2:Y}${3:, 'Color', '${4:b}, 'LineWidth', ${5:1}, 'LineStyle', ${6:-}'})",
		"description": "Create line object"
	},
	"line3D": {
		"prefix": "line3D",
		"body": "line(${1:X}, ${2:Y}, ${3:Z}${4:, 'Color', '${5:b}, 'LineWidth', ${6:1}, 'LineStyle', ${7:-}'})",
		"description": "Create 3D line object"
	},
	"narginchk": {
		"prefix": "narginchk",
		"body": "narginchk(${1:minargs}, ${2:maxargs})",
		"description": "Validate number of input arguments"
	},
	"set": {
		"prefix": "set",
		"body": "set(${1:get(${2:gca}, '${3:PropertyName}')}, '${4:PropertyName}', ${5:PropertyValue});",
		"description": "Set graphics object properties"
	},
	"func": {
		"prefix": "func",
		"body": [
			"function ${1:output} = ${2:myFun}(${3:input})",
			"\t$0",
			"end"
		],
		"description": "Small function"
	},
	"sprintf": {
		"prefix": "sprintf",
		"body": "sprintf(${1:formatSpec}, ${2:A1})",
		"description": "Format data into string"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch ${1:variable}",
			"case ${2:'${3:string}'}",
			"\t$0",
			"end"
		],
		"description": "switch ... case ... end"
	},
	"switcho": {
		"prefix": "switcho",
		"body": [
			"switch ${1:variable}",
			"case ${2:'${3:string}'}",
			"\t$4",
			"otherwise",
			"\t$5",
			"end"
		],
		"description": "switch ... case ... otherwise ... end"
	},
	"title": {
		"prefix": "title",
		"body": "set(get(gca, 'Title'), 'String', ${1:'${2}'});",
		"description": "Sets the title of the current axe handle"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"\t$1",
			"catch",
			"\t$2",
			"end"
		],
		"description": "try ... catch ... end"
	},
	"unix": {
		"prefix": "unix",
		"body": "[${1:status}, ${2:cmdout}] = unix('${3:command}');",
		"description": "Execute UNIX command and return output"
	},
	"oncleanup": {
		"prefix": "oncleanup",
		"body": "${1:cleanupObj} = onCleanup(${2:cleanupFunc})",
		"description": "Cleanup tasks upon function completion"
	},
	"warning": {
		"prefix": "warning",
		"body": "warning('${1:warning description}'${2:, ${3:A1}})",
		"description": "Display warning message"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ${1:condition}",
			"\t$2",
			"end"
		],
		"description": "Repeat execution of statements while condition is true"
	},
	"xlabel": {
		"prefix": "xlabel",
		"body": "set(get(gca, 'XLabel'), 'String', ${1:'${2}'});",
		"description": "Label x-axis"
	},
	"ylabel": {
		"prefix": "ylabel",
		"body": "set(get(gca, 'YLabel'), 'String', ${1:'${2}'});",
		"description": "Label y-axis"
	},
	"zlabel": {
		"prefix": "zlabel",
		"body": "set(get(gca, 'ZLabel'), 'String', ${1:'${2}'});",
		"description": "Label z-axis"
	},
		"xtick": {
		"prefix": "xtick",
		"body": "set(get(gca, 'XTick'), 'String', ${1:'${2}'});",
		"description": "Change X-Axis Tick Value Locations and Labels"
	},
		"ytick": {
		"prefix": "ytick",
		"body": "set(get(gca, 'YTick'), 'String', ${1:'${2}'});",
		"description": "Change Y-Axis Tick Value Locations and Labels"
	}
}